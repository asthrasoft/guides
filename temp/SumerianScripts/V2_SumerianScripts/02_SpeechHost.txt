'use strict';

// The sumerian object can be used to access Sumerian engine
// types.
//
/* global sumerian */

// Called when play mode starts.
//
function setup(args, ctx) {
}

// Called on every physics update, after setup(). When used in a
// ScriptAction, this function is called only while the state
// containing the action is active.
//
// For the best performance, remove this function if it is not
// used.
//
function fixedUpdate(args, ctx) {
}

// Called on every render frame, after setup(). When used in a
// ScriptAction, this function is called only while the state
// containing the action is active.
//
// For the best performance, remove this function if it is not
// used.
//
function update(args, ctx) {
}

// Called after all script "update" methods in the scene has
// been called. When used in a ScriptAction, this function is
// called only while the state containing the action is active.
//
// For the best performance, remove this function if it is not
// used.
//
function lateUpdate(args, ctx) {
}

// When used in a ScriptAction, called when a state is entered.
// Use ctx.transitions.success() to trigger the On<State>Success transition
// and ctx.transitions.failure() to trigger the On<State>Failure transition
// 
// 


function enter(args, ctx) {
	console.log("02_Host Speaking");
		
	if(ctx.entityData.hostResponse==undefined){		
		ctx.entityData.hostResponse = "Hi, I am your virtual interviewer. Press,t, to speak, and, n, when you are done, with your response. Shall we begin the interview?";
		//console.log("02_Maya dialogue initiated.");	
	}

	//console.log("Host : ",ctx.entityData.hostResponse);
	const speechComponent = ctx.entity.getComponent('SpeechComponent');
	const speech = new sumerian.Speech();

	speechComponent.addSpeech(speech);

	speech.updateConfig({
		body: '<speak>' + ctx.entityData.hostResponse + '</speak>',
		voice: ctx.entityData.hostVoice
	});
	ctx.speak = () => {
		if(ctx.entityData.hostResponse.includes("ERROR:")){		
			//Show message 'Press t to speak.
			const evt = new CustomEvent("INTERVIEW_DONE", {
				bubbles: true, 
				detail: {message: "Interview Done"}
			});
			ctx.domElement.dispatchEvent(evt);
			console.log("02_Interview Complete");
			ctx.transitions.failure();	
		}
		else {
			speech.play().then(() => {
				console.log("02_Host Says : " + ctx.entityData.hostResponse);
			
				//Show message 'Press t to speak.
				const evt = new CustomEvent("HOST_LISTENING", {
					bubbles: true, 
					detail: {message: "Host Listening"}
				});
				ctx.domElement.dispatchEvent(evt);
				console.log("02_Host Done Speaking");
				ctx.transitions.success();
			});
		}			
	};

	ctx.speak();	
}

// When used in a ScriptAction, called when a state is exited.
//
//
//
//

function exit(args, ctx) {
}

// Called when play mode stops.
//
function cleanup(args, ctx) {
}

// Defines script parameters.
//
var parameters = [];
