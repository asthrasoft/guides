'use strict';

// The sumerian object can be used to access Sumerian engine
// types.
//
/* global sumerian */

// Called when play mode starts.
//
function setup(args, ctx) {
}

// Called on every physics update, after setup(). When used in a
// ScriptAction, this function is called only while the state
// containing the action is active.
//
// For the best performance, remove this function if it is not
// used.
//
function fixedUpdate(args, ctx) {
}

// Called on every render frame, after setup(). When used in a
// ScriptAction, this function is called only while the state
// containing the action is active.
//
// For the best performance, remove this function if it is not
// used.
//
function update(args, ctx) {
}

// Called after all script "update" methods in the scene has
// been called. When used in a ScriptAction, this function is
// called only while the state containing the action is active.
//
// For the best performance, remove this function if it is not
// used.
//
function lateUpdate(args, ctx) {
}

// When used in a ScriptAction, called when a state is entered.
// Use ctx.transitions.success() to trigger the On<State>Success transition
// and ctx.transitions.failure() to trigger the On<State>Failure transition
function enter(args, ctx) {
	console.log("04_Listening to transcription");
	ctx.i=true;

	ctx.worldData.recogn.onresult = (event) => {
		console.log("04_transcription results event");
		//console.log("04_yes results",event.results);
		
		if(event.results[event.results.length-1].isFinal){
			for(var i=ctx.worldData.index;i<event.results.length;i++){
				if(event.results[i].isFinal){						
					ctx.worldData.transcript+=event.results[i][0].transcript;					
				}
			}
			console.log("***04_transcriptData***",ctx.worldData.transcript);
			ctx.worldData.index=event.results.length;
			ctx.i=false;
			ctx.transitions.success();			
		}
		
		//ctx.transitions.success();
	};

	console.log("04_no results");	
}

// When used in a ScriptAction, called when a state is exited.
//
function exit(args, ctx) {
}

// Called when play mode stops.
//
function cleanup(args, ctx) {
}

// Defines script parameters.
//
var parameters = [];
