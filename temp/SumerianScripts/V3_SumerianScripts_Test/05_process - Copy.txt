'use strict';


// The sumerian object can be used to access Sumerian engine
// types.
//
/* global sumerian */

// Called when play mode starts.
//
function setup(args, ctx) {

}

// Called on every physics update, after setup(). When used in a
// ScriptAction, this function is called only while the state
// containing the action is active.
//
// For the best performance, remove this function if it is not
// used.
//
function fixedUpdate(args, ctx) {
}

// Called on every render frame, after setup(). When used in a
// ScriptAction, this function is called only while the state
// containing the action is active.
//
// For the best performance, remove this function if it is not
// used.
//
function update(args, ctx) {
}

// Called after all script "update" methods in the scene has
// been called. When used in a ScriptAction, this function is
// called only while the state containing the action is active.
//
// For the best performance, remove this function if it is not
// used.
//
function lateUpdate(args, ctx) {
}

// When used in a ScriptAction, called when a state is entered.
// Use ctx.transitions.success() to trigger the On<State>Success transition
// and ctx.transitions.failure() to trigger the On<State>Failure transition

// var xhr = new XMLHttpRequest();

function enter(args, ctx) {
	console.log("Inside User Speech")
// 	SpeechRecognition = webkitSpeechRecognition || SpeechRecognition;
// 	let finalTranscript = '';
// 	let recognition = new SpeechRecognition();
// 	recognition.interimResults = true;
// 	recognition.maxAlternatives = 1;
// 	recognition.continuous = true;
	
// 	ctx.worldData.recogn.onspeechend = function() {
// ctx.worldData.recogn.stop();
// 		console.log('Speech recognition has stopped.');
// }
// 
// 
		//console.log("enter result");
	

// 	ctx.worldData.recogn.onresult = (event) => {
// 		ctx.worldData.transcript = "";
// 		console.log("results",event.results)
// 		if(event.results[0].isFinal){
// 			var xhr = new XMLHttpRequest();	
// // 			xhr.withCredentials = true;	
// 			var urlDomain = "https://143.110.191.186/";
// 			for(var i=0;i<event.results.length;i++)
// 				{
// 					ctx.worldData.transcript+=event.results[i][0].transcript;
// 				}
// 				
			ctx.worldData.recogn.stop();
			console.log('Speech recognition has stopped.');

			var xhr = new XMLHttpRequest();	
			//xhr.withCredentials = true;	
	
			var url = ctx.entityData.FUQURL;
	
			var userResponse = ctx.worldData.transcript;
	
			console.log("User Resp : " + userResponse);
			if (ctx.entityData.QState == 0){
				// /start?id=TEST01&topic=Constitution&qcount=4
				url += "/start?id=" + ctx.entityData.id + "&topic=" + ctx.entityData.topic + "&qcount=" + ctx.entityData.qcount;
				//console.log("sending : ", url);
			}
			else{
				// /next?id=TEST01&res=UserResponse
				url += "/next?id=" + ctx.entityData.id + "&res=" + userResponse;
			}
				
			console.log("sending : ", url);
			xhr.open('GET',url,true);
			xhr.send();
			xhr.onreadystatechange = (e) => {
				if(xhr.status==200){
					ctx.entityData.hostResponse = xhr.responseText;
					ctx.entityData.QState = 1;
					console.log("response text : ", ctx.entityData.hostResponse);
					//console.log("")
					ctx.worldData.allowSpeech = false;
					ctx.transitions.success();
				}
				else
					{
						console.log("Request Failed. Code not 200.", xhr.status);
					}
			};
// 		}
// 	}
// 	recognition.start();
	
}


// When used in a ScriptAction, called when a state is exited.
//
function exit(args, ctx) {
}

// Called when play mode stops.
//
function cleanup(args, ctx) {
}

// Defines script parameters.
//
var parameters = [];
